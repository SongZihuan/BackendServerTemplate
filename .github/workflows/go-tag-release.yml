name: Check And Publish Golang Project
permissions:
  contents: read

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'   # 匹配 'v' 开头的标签
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - main
      - master

jobs:
  test-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4' # 根据需要指定Go版本

      - name: Download module
        run: GOOS=linux GOARCH=amd64 go mod tidy

      - name: Go generate
        run: GOOS=linux GOARCH=amd64 go generate ./...

      - name: Test
        run: GOOS=linux GOARCH=amd64 go test ./...

  test-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4' # 根据需要指定Go版本

      - name: Download module
        run: |
          set GOOS=windows
          set GOARCH=amd64
          go mod tidy

      - name: Go generate
        run: |
          set GOOS=windows
          set GOARCH=amd64
          go generate .\...

      - name: Test
        run:  |
          set GOOS=windows
          set GOARCH=amd64
          go test .\...

  build-ubuntu:
    runs-on: ubuntu-latest
    needs:
      - test-ubuntu

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4' # 根据需要指定Go版本

      - name: Download module
        run: GOOS=linux GOARCH=amd64 go mod tidy

      - name: Go generate
        run: GOOS=linux GOARCH=amd64 go generate ./...

      - name: List source directory
        run: |
          ls -l "${{ github.workspace }}"

      - name: Mkdir build dir
        run: |
          mkdir -p ${{ github.workspace }}/output

      - name: Build lion
        run: |
          GOOS=linux GOARCH=amd64 go build -o "${{ github.workspace }}/output/linux_amd64_lion" -trimpath -ldflags='-s -w -extldflags "-static"' github.com/SongZihuan/BackendServerTemplate/src/cmd/lion

      - name: Build tiger
        run: |
          GOOS=linux GOARCH=amd64 go build -o "${{ github.workspace }}/output/linux_amd64_tiger" -trimpath -ldflags='-s -w -extldflags "-static"' github.com/SongZihuan/BackendServerTemplate/src/cmd/tiger

      - name: Build monkey
        run: |
          GOOS=linux GOARCH=amd64 go build -o "${{ github.workspace }}/output/linux_amd64_monkey" -trimpath -ldflags='-s -w -extldflags "-static"' github.com/SongZihuan/BackendServerTemplate/src/cmd/monkey

      - name: Build giraffe
        run: |
          GOOS=linux GOARCH=amd64 go build -o "${{ github.workspace }}/output/linux_amd64_giraffe" -trimpath -ldflags='-s -w -extldflags "-static"' github.com/SongZihuan/BackendServerTemplate/src/cmd/giraffe

      - name: List build directory
        run: |
          ls -l "${{ github.workspace }}/output"

      - name: Upload ubuntu artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux_amd64_executable_files
          path: "${{ github.workspace }}/output/"
          if-no-files-found: error

  build-windows:
    runs-on: windows-latest
    needs:
      - test-windows

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4' # 根据需要指定Go版本

      - name: Download module
        run:  |
          set GOOS=windows
          set GOARCH=amd64
          go mod tidy

      - name: Go generate
        run:  |
          set GOOS=windows
          set GOARCH=amd64
          go generate .\...

      - name: List source directory
        run: |
          ls -l "${{ github.workspace }}"

      - name: Mkdir build dir
        run: |
          mkdir -p ${{ github.workspace }}\output

      - name: Build lion
        run: |
          set GOOS=windows
          set GOARCH=amd64
          go build -o "${{ github.workspace }}\output\windows_amd64_lion.exe" -trimpath -ldflags='-s -w -extldflags "-static"' github.com/SongZihuan/BackendServerTemplate/src/cmd/lion

      - name: Build tiger
        run:  |
          set GOOS=windows
          set GOARCH=amd64
          go build -o "${{ github.workspace }}\output\windows_amd64_tiger.exe" -trimpath -ldflags='-s -w -extldflags "-static"' github.com/SongZihuan/BackendServerTemplate/src/cmd/tiger

      - name: Build monkey
        run:  |
          set GOOS=windows
          set GOARCH=amd64
          go build -o "${{ github.workspace }}\output\windows_amd64_monkey.exe" -trimpath -ldflags='-s -w -extldflags "-static"' github.com/SongZihuan/BackendServerTemplate/src/cmd/monkey

      - name: Build giraffe
        run: |
          set GOOS=windows
          set GOARCH=amd64
          go build -o "${{ github.workspace }}\output\windows_amd64_giraffe.exe" -trimpath -ldflags='-s -w -extldflags "-static"' github.com/SongZihuan/BackendServerTemplate/src/cmd/giraffe

      - name: List build directory
        run: |
          ls -l "${{ github.workspace }}/output"

      - name: Upload windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows_amd64_executable_files
          path: ${{ github.workspace }}\output\
          if-no-files-found: error

  create_release:
    runs-on: ubuntu-latest
    needs:
      - build-ubuntu
      - build-windows
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取所有历史记录以便能够创建标签

      - name: Extract tag name
        id: extract_tag
        run: |
          # 提取标签名
          TAG_NAME=$(echo "${GITHUB_REF}" | sed 's/refs\/tags\///')
          echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: Download ubuntu artifact
        uses: actions/download-artifact@v4
        with:
          name: linux_amd64_executable_files
          path: ${{ github.workspace }}/output

      - name: Download windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows_amd64_executable_files
          path: ${{ github.workspace }}/output

      - name: Generate Release file
        run: |
          go run github.com/SongZihuan/BackendServerTemplate/tool/generate/release
          mv "${{ github.workspace }}/release_info.md.ignore" "${{ github.workspace }}/release_info.md"

      - name: List directory
        run: ls -l ${{ github.workspace }}/output

      - name: Create GitHub Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ github.workspace }}/output/linux_amd64_lion,${{ github.workspace }}/output/linux_amd64_tiger,${{ github.workspace }}/output/linux_amd64_monkey,${{ github.workspace }}/output/linux_amd64_giraffe,${{ github.workspace }}/output/windows_amd64_lion.exe,${{ github.workspace }}/output/windows_amd64_tiger.exe,${{ github.workspace }}/output/windows_amd64_monkey.exe,${{ github.workspace }}/output/windows_amd64_giraffe.exe"
          artifactErrorsFailBuild: true
          allowUpdates: false
          bodyFile: "${{ github.workspace }}/release_info.md"
          generateReleaseNotes: false
          makeLatest: "legacy"
          tag: "${{  github.ref  }} "
          name: "版本 ${{  steps.extract_tag.outputs.tag  }} 发布！"

      - name: Output the URL of the new release
        run: echo "The release is available at ${{ steps.create_release.outputs.html_url }}"
    outputs:
      tag: "${{  steps.extract_tag.outputs.tag  }}"
      release: "${{ steps.create_release.outputs.html_url }}"
